version: '3.2'
services:
  reverseproxy:
    container_name: reverseproxy
    build:
      context: ./reverse-proxy
      dockerfile: 'Dockerfile'
    ports:
      - 80:80
    restart: always
    depends_on:
      - app-server-1
      - app-server-2
      - app-server-3
      - app-server-4
    cpus: '2.0'
    mem_limit: 500m

  app-server-1: &app-server-template
    container_name: app-server-1
    build:
      context: ./app-server
      dockerfile: 'Dockerfile'
    ports:
      - 3000:3000
    environment:
      - PORT=3000
      - APP_NAME=app-server-1
    cpus: '1.0'
    mem_limit: 1Gb
    restart: always
    depends_on:
      - db
      - cache
      - queue
  
  app-server-2:
    <<: *app-server-template
    container_name: app-server-2
    ports:
      - 3001:3001
    environment:
      - PORT=3001
      - APP_NAME=app-server-2
  
  app-server-3:
    <<: *app-server-template
    container_name: app-server-3
    ports:
      - 3002:3002
    environment:
      - PORT=3002
      - APP_NAME=app-server-3

  app-server-4:
    <<: *app-server-template
    container_name: app-server-4
    ports:
      - 3003:3003
    environment:
      - PORT=3003
      - APP_NAME=app-server-4

  consumer-1: &consumer-template
    container_name: consumer-1
    build:
      context: ./app-server
      dockerfile: 'Dockerfile-Consumer'
    ports:
      - 7000:7000
    cpus: '1.0'
    mem_limit: 500m
    restart: always
    depends_on:
      - db
      - cache
      - queue
    environment:
      - PORT=7000
      - APP_NAME=consumer-1

  consumer-2: 
    <<: *consumer-template
    container_name: consumer-2
    ports:
      - 7001:7001
    environment:
      - PORT=7001
      - APP_NAME=consumer-2

  # consumer-3: 
  #   <<: *consumer-template
  #   container_name: consumer-3
  #   ports:
  #     - 7002:7002
  #   environment:
  #     - PORT=7002
  #     - APP_NAME=consumer-3
  
  # consumer-4: 
  #   <<: *consumer-template
  #   container_name: consumer-4
  #   ports:
  #     - 7003:7003
  #   environment:
  #     - PORT=7003
  #     - APP_NAME=consumer-4

  db:
    container_name: crud-db
    image: postgres:14.1-alpine
    cpus: '1.0'
    mem_limit: 500m
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5432:5432
    volumes:
      - db:/var/lib/postgresql/data

  cache:
    container_name: cache
    image: redis:6.2-alpine
    restart: always
    cpus: '1.0'
    mem_limit: 200m
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - cache:/data

  queue:
    image: rabbitmq:3.12-management-alpine
    container_name: queue
    ports:
      - '5672:5672'
      - '15672:15672'
    cpus: '1.0'
    mem_limit: 500m
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:15672"]
        interval: 5s
        timeout: 10s
        retries: 10
    environment:
      - RABBITMQ_LOGS=error

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    restart: always
    volumes:
      # allow cAdvisor access to host's time info (read only)
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      # allow cAdvisor access to host's file system (read only)
      - /:/rootfs:ro
      # allow cAdvisor access to host's runtime info and sockets (read write)
      - /var/run:/var/run:rw
      # allow cAdvisor access to host's sytem info and stats (read only)
      - /sys:/sys:ro
      # allow cAdvisor access to host's docker containers (read only) 
      - /var/lib/docker:/var/lib/docker:ro
      # allow cAdvisor to communicate to host's docker demo (read write)
      - /var/run/docker.sock:/var/run/docker.sock:rw
    devices:
      # allow cAdvisor to access kernel messages within the container
      - /dev/kmsg:/dev/kmsg
    ports:
      - 8080:8080
    # depends_on:
    #   - app-server

  nginx-prometheus-exporter:
    container_name: nginx-prometheus-exporter
    image: nginx/nginx-prometheus-exporter:latest
    ports:
      - "9113:9113"
    command:
      -nginx.scrape-uri=http://reverseproxy:80/metrics
      -web.telemetry-path=/metrics

  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - '9090:9090'
    volumes:
      # allow Prometheus access to host's time info (read only)
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      # copy "prometheus.yml" from host to container
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - app-server-1
      - app-server-2

  grafana:
    image: grafana/grafana
    ports:
      - '3005:3000'
    depends_on:
      - prometheus
    environment:
      - GF_LOG_LEVEL=error
    restart: always
    volumes:
      # allow Grafana access to host's time info (read only)
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      # copy Grafana config files from host to container
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/data:/var/lib/grafana
    user: "1000"

volumes:
  db:
    driver: local
  cache:
    driver: local
